# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This will parse a textual representation of a duration. The formats
# accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}
# with days considered to be exactly 24 hours.
# <p>
# Examples:
# <pre>
#    "PT20.345S" -- parses as "20.345 seconds"
#    "PT15M"     -- parses as "15 minutes" (where a minute is 60 seconds)
#    "PT10H"     -- parses as "10 hours" (where an hour is 3600 seconds)
#    "P2D"       -- parses as "2 days" (where a day is 24 hours or 86400 seconds)
#    "P2DT3H4M"  -- parses as "2 days, 3 hours and 4 minutes"
#    "P-6H3M"    -- parses as "-6 hours and +3 minutes"
#    "-P6H3M"    -- parses as "-6 hours and -3 minutes"
#    "-P-6H+3M"  -- parses as "+6 hours and -3 minutes"
# </pre>
filter: "{ tags -> tags.job_name == 'apisix-monitoring' }" # The OpenTelemetry job name
expPrefix:  tag({tags -> tags.host_name = 'apisix::' + tags.service_instance_id})
expSuffix:
metricPrefix: meter_apisix
metricsRules:
  # Service
  - name: sv_http_connections
    exp: apisix_nginx_http_current_connections.sum(['state','host_name']).service(['host_name'] , Layer.APISIX)
  - name: shared_dict_capacity_bytes
    exp: apisix_shared_dict_capacity_bytes.sum(['name','host_name']).service(['host_name'] , Layer.APISIX)
  - name: shared_dict_free_space_bytes
    exp: apisix_shared_dict_free_space_bytes.sum(['name','host_name']).service(['host_name'] , Layer.APISIX)
  - name: sv_etcd_indexes
    exp: apisix_etcd_modify_indexes.sum(['key','host_name']).service(['host_name'] , Layer.APISIX)
  - name: sv_etcd_reachable
    exp: apisix_etcd_reachable.downsampling(LATEST).service(['host_name'] , Layer.APISIX)
  - name: http_requests
    exp: apisix_http_requests_total.rate('PT1M').service(['host_name'] , Layer.APISIX)
    # Not match any route
    # Refer to  https://apisix.apache.org/docs/apisix/plugins/prometheus/
  - name: sv_bandwidth_unmatched
    exp: apisix_bandwidth.tagEqual('route','').tagEqual('node','').sum(['type','host_name']).rate('PT1M').service(['host_name'] , Layer.APISIX)
  - name: sv_http_status_unmatched
    exp: apisix_http_status.tagEqual('route','').tagEqual('node','').sum(['code','host_name']).rate('PT1M').service(['host_name'] , Layer.APISIX)
  - name: sv_http_latency_unmatched
    exp:  apisix_http_latency.tagEqual('route','').tagEqual('node','').sum(['type','le','host_name']).histogram().histogram_percentile([50,70,90,99]).service(['host_name'] , Layer.APISIX)
   # Match a route
  - name: sv_bandwidth_matched
    exp: apisix_bandwidth.tagNotEqual('route','').tagNotEqual('node','').sum(['type','host_name']).rate('PT1M').service(['host_name'] , Layer.APISIX)
  - name: sv_http_status_matched
    exp: apisix_http_status.tagNotEqual('route','').tagNotEqual('node','').sum(['code','host_name']).rate('PT1M').service(['host_name'] , Layer.APISIX)
  - name: sv_http_latency_matched
    exp:  apisix_http_latency.tagNotEqual('route','').tagNotEqual('node','').sum(['type','le','host_name']).histogram().histogram_percentile([50,70,90,99]).service(['host_name'] , Layer.APISIX)

  # Instance
  # Reorganization metrics which has `node` label to instance level (node as instance name)
  - name: node_http_status
    exp: apisix_http_status.tagNotEqual('node','').sum(['code','host_name','node']).rate('PT1M').instance(['host_name'],['node'], Layer.APISIX)
  - name: node_bandwidth
    exp:  apisix_bandwidth.tagNotEqual('node','').sum(['type','host_name','node']).rate('PT1M').instance(['host_name'],['node'], Layer.APISIX)
  - name: node_http_latency
    exp:  apisix_http_latency.tagNotEqual('node','').sum(['type','le','host_name','node']).histogram().histogram_percentile([50,70,90,99]).instance(['host_name'],['node'], Layer.APISIX)

  # Endpoint
  # Reorganization metrics which has `route` label to endpoint level (route as endpoint name)
  - name: route_http_status
    exp: apisix_http_status.tagNotEqual('route','').sum(['code','host_name','route']).rate('PT1M').endpoint(['host_name'],['route'], Layer.APISIX)
  - name: route_bandwidth
    exp: apisix_bandwidth.tagNotEqual('route','').sum(['type','host_name','route']).rate('PT1M').endpoint(['host_name'],['route'], Layer.APISIX)
  - name: route_http_latency
    exp:  apisix_http_latency.tagNotEqual('route','').sum(['type','le','host_name','route']).histogram().histogram_percentile([50,70,90,99]).endpoint(['host_name'],['route'], Layer.APISIX)